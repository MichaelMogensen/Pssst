/*

From GameViewController

// ...
override func didReceiveMemoryWarning()
{
super.didReceiveMemoryWarning()
}
// ...
override var prefersStatusBarHidden : Bool
{
return true
}
// ...
override var shouldAutorotate : Bool
{
return true
}
// ...
override func supportedInterfaceOrientations() -> Int
{
if UIDevice.currentDevice().userInterfaceIdiom == .Phone
{
return Int(UIInterfaceOrientationMask.AllButUpsideDown.rawValue)
}
else
{
return Int(UIInterfaceOrientationMask.All.rawValue)
}
}
*/

// Load game backgound from original 1983 picture.
private func LoadBackground() -> SKSpriteNode!
{
let backgroundSprite = SKSpriteNode(imageNamed: EPssstAnimals.Background.Name)
backgroundSprite.name = EPssstAnimals.Background.Name
backgroundSprite.size = CGSize(
width: Screen!.Width,
height: Screen!.Height)
backgroundSprite.position = CGPoint(
x: Screen!.Width / 2,
y: Screen!.Height / 2)
return backgroundSprite
}


NOT WORKING:

/*
func TryLoadAtlas() throws -> SKTextureAtlas?
{
return SKTextureAtlas(named: atlasName)
}

let textureAtlas: SKTextureAtlas?
do
{
textureAtlas = try TryLoadAtlas()
}
catch
{
textureAtlas = nil
}

// Got atlas?
if (textureAtlas == nil)
{ return }

// Now load frames from it one by one.
var sprite = PssstSprite()
let count = textureAtlas!.textureNames.count
for frameNo in 0..<count
{
let frameId = frameFromId + frameNo * frameStep
let textureName = "\(atlasName)\(frameId)"
let frame = textureAtlas?.textureNamed(textureName)
if (frameNo == 0)
{
sprite = PssstSprite(texture: frame)
sprite.frames = []
}
sprite.frames.append(frame!)
}
sprite.name = name
sprite.position = CGPoint(
x: x,
y: y)
if (width > -1 && height > -1)
{
sprite.size = CGSize(
width: width,
height: height)
}
addChild(sprite)

let actionMove = SKAction.animate(
with: sprite.frames,
timePerFrame: 0.2,
resize: true,
restore: true)
let actionMoveForever = SKAction.repeatForever(actionMove)
sprite.run(actionMoveForever, withKey:"WormMove")
*/

WORKING:

//        let newPoint1 = CGPoint(x: CGFloat(200), y: CGFloat(200))
//        let newPoint2 = CGPoint(x: CGFloat(300), y: CGFloat(100))
//
//        let action1 = SKAction.move(to: newPoint1, duration: 3.0)
//        let action2 = SKAction.move(to: newPoint2, duration: 5.0)
//
//        let actions = [ action1, action2 ]
//
//        let action = SKAction.sequence(actions)
//
//
//        sprite.run(action)



// On touch began for 1..N fingers.
private func OnTouchesBegan(_ touch: UITouch)
{
//        let location = touch.location(in: self)
//
//        Util.Log("Begin location = (\(location.x), \(location.y))")
}
// On touch has moved for 1..N fingers.
private func OnTouchesMoved(_ touch: UITouch)
{
//        let location = touch.location(in: self)
//
//        Util.Log("Moved location = (\(location.x), \(location.y))")
}
// On touch has ended for 1..N fingers.
private func OnTouchesEnded(_ touch: UITouch)
{
//        let location = touch.location(in: self)
//
//        Util.Log("End location = (\(location.x), \(location.y))")
}
// On touch has cancelled for 1..N fingers.
private func OnTouchesCancelled(_ touch: UITouch)
{
//        let location = touch.location(in: self)
//
//        Util.Log("Cancel location = (\(location.x), \(location.y))")
}


// Move existing sprite to new place.
private func MoveSprite(
_ sprite: PssstSprite,
_ newX: Int,
_ newY: Int)
{
let newPoint = CGPoint(x: CGFloat(newX), y: CGFloat(newY))
let action = SKAction.move(to: newPoint, duration: 5.0)
sprite.run(action)
}







let dummyHandler = {(arg: Int) -> Void in
// NOP
}




